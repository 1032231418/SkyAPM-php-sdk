// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service-mesh-probe/service-mesh.proto

package servicemesh

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	common "pb6/common"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Protocol int32

const (
	Protocol_HTTP Protocol = 0
	Protocol_gRPC Protocol = 1
)

var Protocol_name = map[int32]string{
	0: "HTTP",
	1: "gRPC",
}

var Protocol_value = map[string]int32{
	"HTTP": 0,
	"gRPC": 1,
}

func (x Protocol) String() string {
	return proto.EnumName(Protocol_name, int32(x))
}

func (Protocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ab52fdf17822efde, []int{0}
}

type ServiceMeshMetric struct {
	StartTime               int64              `protobuf:"varint,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime                 int64              `protobuf:"varint,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
	SourceServiceName       string             `protobuf:"bytes,3,opt,name=sourceServiceName,proto3" json:"sourceServiceName,omitempty"`
	SourceServiceId         int32              `protobuf:"varint,4,opt,name=sourceServiceId,proto3" json:"sourceServiceId,omitempty"`
	SourceServiceInstance   string             `protobuf:"bytes,5,opt,name=sourceServiceInstance,proto3" json:"sourceServiceInstance,omitempty"`
	SourceServiceInstanceId int32              `protobuf:"varint,6,opt,name=sourceServiceInstanceId,proto3" json:"sourceServiceInstanceId,omitempty"`
	DestServiceName         string             `protobuf:"bytes,7,opt,name=destServiceName,proto3" json:"destServiceName,omitempty"`
	DestServiceId           int32              `protobuf:"varint,8,opt,name=destServiceId,proto3" json:"destServiceId,omitempty"`
	DestServiceInstance     string             `protobuf:"bytes,9,opt,name=destServiceInstance,proto3" json:"destServiceInstance,omitempty"`
	DestServiceInstanceId   int32              `protobuf:"varint,10,opt,name=destServiceInstanceId,proto3" json:"destServiceInstanceId,omitempty"`
	Endpoint                string             `protobuf:"bytes,11,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Latency                 int32              `protobuf:"varint,12,opt,name=latency,proto3" json:"latency,omitempty"`
	ResponseCode            int32              `protobuf:"varint,13,opt,name=responseCode,proto3" json:"responseCode,omitempty"`
	Status                  bool               `protobuf:"varint,14,opt,name=status,proto3" json:"status,omitempty"`
	Protocol                Protocol           `protobuf:"varint,15,opt,name=protocol,proto3,enum=Protocol" json:"protocol,omitempty"`
	DetectPoint             common.DetectPoint `protobuf:"varint,16,opt,name=detectPoint,proto3,enum=DetectPoint" json:"detectPoint,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}           `json:"-"`
	XXX_unrecognized        []byte             `json:"-"`
	XXX_sizecache           int32              `json:"-"`
}

func (m *ServiceMeshMetric) Reset()         { *m = ServiceMeshMetric{} }
func (m *ServiceMeshMetric) String() string { return proto.CompactTextString(m) }
func (*ServiceMeshMetric) ProtoMessage()    {}
func (*ServiceMeshMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab52fdf17822efde, []int{0}
}

func (m *ServiceMeshMetric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceMeshMetric.Unmarshal(m, b)
}
func (m *ServiceMeshMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceMeshMetric.Marshal(b, m, deterministic)
}
func (m *ServiceMeshMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceMeshMetric.Merge(m, src)
}
func (m *ServiceMeshMetric) XXX_Size() int {
	return xxx_messageInfo_ServiceMeshMetric.Size(m)
}
func (m *ServiceMeshMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceMeshMetric.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceMeshMetric proto.InternalMessageInfo

func (m *ServiceMeshMetric) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *ServiceMeshMetric) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *ServiceMeshMetric) GetSourceServiceName() string {
	if m != nil {
		return m.SourceServiceName
	}
	return ""
}

func (m *ServiceMeshMetric) GetSourceServiceId() int32 {
	if m != nil {
		return m.SourceServiceId
	}
	return 0
}

func (m *ServiceMeshMetric) GetSourceServiceInstance() string {
	if m != nil {
		return m.SourceServiceInstance
	}
	return ""
}

func (m *ServiceMeshMetric) GetSourceServiceInstanceId() int32 {
	if m != nil {
		return m.SourceServiceInstanceId
	}
	return 0
}

func (m *ServiceMeshMetric) GetDestServiceName() string {
	if m != nil {
		return m.DestServiceName
	}
	return ""
}

func (m *ServiceMeshMetric) GetDestServiceId() int32 {
	if m != nil {
		return m.DestServiceId
	}
	return 0
}

func (m *ServiceMeshMetric) GetDestServiceInstance() string {
	if m != nil {
		return m.DestServiceInstance
	}
	return ""
}

func (m *ServiceMeshMetric) GetDestServiceInstanceId() int32 {
	if m != nil {
		return m.DestServiceInstanceId
	}
	return 0
}

func (m *ServiceMeshMetric) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *ServiceMeshMetric) GetLatency() int32 {
	if m != nil {
		return m.Latency
	}
	return 0
}

func (m *ServiceMeshMetric) GetResponseCode() int32 {
	if m != nil {
		return m.ResponseCode
	}
	return 0
}

func (m *ServiceMeshMetric) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *ServiceMeshMetric) GetProtocol() Protocol {
	if m != nil {
		return m.Protocol
	}
	return Protocol_HTTP
}

func (m *ServiceMeshMetric) GetDetectPoint() common.DetectPoint {
	if m != nil {
		return m.DetectPoint
	}
	return common.DetectPoint_client
}

type MeshProbeDownstream struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeshProbeDownstream) Reset()         { *m = MeshProbeDownstream{} }
func (m *MeshProbeDownstream) String() string { return proto.CompactTextString(m) }
func (*MeshProbeDownstream) ProtoMessage()    {}
func (*MeshProbeDownstream) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab52fdf17822efde, []int{1}
}

func (m *MeshProbeDownstream) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshProbeDownstream.Unmarshal(m, b)
}
func (m *MeshProbeDownstream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshProbeDownstream.Marshal(b, m, deterministic)
}
func (m *MeshProbeDownstream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshProbeDownstream.Merge(m, src)
}
func (m *MeshProbeDownstream) XXX_Size() int {
	return xxx_messageInfo_MeshProbeDownstream.Size(m)
}
func (m *MeshProbeDownstream) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshProbeDownstream.DiscardUnknown(m)
}

var xxx_messageInfo_MeshProbeDownstream proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("Protocol", Protocol_name, Protocol_value)
	proto.RegisterType((*ServiceMeshMetric)(nil), "ServiceMeshMetric")
	proto.RegisterType((*MeshProbeDownstream)(nil), "MeshProbeDownstream")
}

func init() {
	proto.RegisterFile("service-mesh-probe/service-mesh.proto", fileDescriptor_ab52fdf17822efde)
}

var fileDescriptor_ab52fdf17822efde = []byte{
	// 459 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x17, 0xb6, 0xb6, 0xe9, 0x5b, 0xb7, 0x76, 0x2e, 0x03, 0xab, 0x42, 0x28, 0xaa, 0x98,
	0x14, 0x21, 0xea, 0xa2, 0x81, 0x80, 0xf3, 0xb6, 0x03, 0x3d, 0x0c, 0x45, 0x59, 0x4f, 0xdc, 0x52,
	0xfb, 0x69, 0x8d, 0x9a, 0xd8, 0x91, 0xed, 0x51, 0xed, 0x7b, 0xf0, 0x81, 0x51, 0xdc, 0x74, 0x4b,
	0xd7, 0x70, 0x4a, 0xde, 0xef, 0xf7, 0xf4, 0xb7, 0x9d, 0x3c, 0xc3, 0x85, 0x41, 0xfd, 0x27, 0xe5,
	0x38, 0xc9, 0xd1, 0x2c, 0x27, 0x85, 0x56, 0x0b, 0x9c, 0xd6, 0x11, 0x2b, 0xb4, 0xb2, 0x6a, 0x34,
	0xe4, 0x2a, 0xcf, 0x95, 0x9c, 0x6e, 0x1e, 0x1b, 0x38, 0xfe, 0xdb, 0x82, 0xb3, 0xbb, 0x4d, 0xef,
	0x2d, 0x9a, 0xe5, 0x2d, 0x5a, 0x9d, 0x72, 0xf2, 0x0e, 0xba, 0xc6, 0x26, 0xda, 0xce, 0xd3, 0x1c,
	0xa9, 0x17, 0x78, 0xe1, 0x61, 0xfc, 0x0c, 0x08, 0x85, 0x0e, 0x4a, 0xe1, 0xdc, 0x2b, 0xe7, 0xb6,
	0x25, 0xf9, 0x04, 0x67, 0x46, 0x3d, 0x68, 0x8e, 0x55, 0xe4, 0xaf, 0x24, 0x47, 0x7a, 0x18, 0x78,
	0x61, 0x37, 0xde, 0x17, 0x24, 0x84, 0xfe, 0x0e, 0x9c, 0x09, 0x7a, 0x14, 0x78, 0x61, 0x2b, 0x7e,
	0x89, 0xc9, 0x57, 0x38, 0xdf, 0x45, 0xd2, 0xd8, 0x44, 0x72, 0xa4, 0x2d, 0x97, 0xdd, 0x2c, 0xc9,
	0x0f, 0x78, 0xdb, 0x28, 0x66, 0x82, 0xb6, 0xdd, 0x3a, 0xff, 0xd3, 0xe5, 0xce, 0x04, 0x1a, 0x5b,
	0x3f, 0x45, 0xc7, 0xad, 0xf4, 0x12, 0x93, 0x0f, 0x70, 0x52, 0x43, 0x33, 0x41, 0x7d, 0x97, 0xbc,
	0x0b, 0xc9, 0x67, 0x18, 0xd6, 0xc1, 0x76, 0xf7, 0x5d, 0x97, 0xd9, 0xa4, 0xca, 0x13, 0x37, 0xe0,
	0x99, 0xa0, 0xe0, 0xf2, 0x9b, 0x25, 0x19, 0x81, 0x8f, 0x52, 0x14, 0x2a, 0x95, 0x96, 0x1e, 0xbb,
	0xf0, 0xa7, 0xba, 0xfc, 0x6b, 0x59, 0x62, 0x51, 0xf2, 0x47, 0xda, 0x73, 0x19, 0xdb, 0x92, 0x8c,
	0xa1, 0xa7, 0xd1, 0x14, 0x4a, 0x1a, 0xbc, 0x56, 0x02, 0xe9, 0x89, 0xd3, 0x3b, 0x8c, 0xbc, 0x81,
	0xb6, 0xb1, 0x89, 0x7d, 0x30, 0xf4, 0x34, 0xf0, 0x42, 0x3f, 0xae, 0x2a, 0x72, 0x01, 0xbe, 0x1b,
	0x24, 0xae, 0x32, 0xda, 0x0f, 0xbc, 0xf0, 0xf4, 0xb2, 0xcb, 0xa2, 0x0a, 0xc4, 0x4f, 0x8a, 0x30,
	0x38, 0x16, 0x68, 0x91, 0xdb, 0xc8, 0xed, 0x6d, 0xe0, 0x3a, 0x7b, 0xec, 0xe6, 0x99, 0xc5, 0xf5,
	0x86, 0xf1, 0x39, 0x0c, 0xcb, 0x71, 0x8c, 0xca, 0x59, 0xbe, 0x51, 0x6b, 0x69, 0xac, 0xc6, 0x24,
	0xff, 0xf8, 0x1e, 0xfc, 0x6d, 0x38, 0xf1, 0xe1, 0xe8, 0xe7, 0x7c, 0x1e, 0x0d, 0x0e, 0xca, 0xb7,
	0xfb, 0x38, 0xba, 0x1e, 0x78, 0x97, 0x77, 0x40, 0xf7, 0x86, 0xb9, 0x02, 0xe4, 0x3b, 0x74, 0xb8,
	0xca, 0x32, 0xe4, 0x96, 0x10, 0xb6, 0xd7, 0x35, 0x7a, 0xcd, 0x1a, 0x16, 0x1c, 0x1f, 0x84, 0xde,
	0xd5, 0x15, 0x4c, 0x94, 0xbe, 0x67, 0x49, 0x91, 0xf0, 0x25, 0x32, 0xb3, 0x7a, 0x5c, 0x27, 0xd9,
	0x2a, 0x95, 0x25, 0xc9, 0x99, 0x44, 0xbb, 0x56, 0x7a, 0xc5, 0xaa, 0xfb, 0x56, 0x5e, 0xb7, 0xc8,
	0xfb, 0xdd, 0x2f, 0x16, 0xdf, 0xa6, 0x35, 0xb4, 0x68, 0xbb, 0x2f, 0xf1, 0xe5, 0x5f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x58, 0x1c, 0xf2, 0xd8, 0xab, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceMeshMetricServiceClient is the client API for ServiceMeshMetricService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceMeshMetricServiceClient interface {
	Collect(ctx context.Context, opts ...grpc.CallOption) (ServiceMeshMetricService_CollectClient, error)
}

type serviceMeshMetricServiceClient struct {
	cc *grpc.ClientConn
}

func NewServiceMeshMetricServiceClient(cc *grpc.ClientConn) ServiceMeshMetricServiceClient {
	return &serviceMeshMetricServiceClient{cc}
}

func (c *serviceMeshMetricServiceClient) Collect(ctx context.Context, opts ...grpc.CallOption) (ServiceMeshMetricService_CollectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ServiceMeshMetricService_serviceDesc.Streams[0], "/ServiceMeshMetricService/collect", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceMeshMetricServiceCollectClient{stream}
	return x, nil
}

type ServiceMeshMetricService_CollectClient interface {
	Send(*ServiceMeshMetric) error
	CloseAndRecv() (*MeshProbeDownstream, error)
	grpc.ClientStream
}

type serviceMeshMetricServiceCollectClient struct {
	grpc.ClientStream
}

func (x *serviceMeshMetricServiceCollectClient) Send(m *ServiceMeshMetric) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceMeshMetricServiceCollectClient) CloseAndRecv() (*MeshProbeDownstream, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MeshProbeDownstream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceMeshMetricServiceServer is the server API for ServiceMeshMetricService service.
type ServiceMeshMetricServiceServer interface {
	Collect(ServiceMeshMetricService_CollectServer) error
}

// UnimplementedServiceMeshMetricServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServiceMeshMetricServiceServer struct {
}

func (*UnimplementedServiceMeshMetricServiceServer) Collect(srv ServiceMeshMetricService_CollectServer) error {
	return status.Errorf(codes.Unimplemented, "method Collect not implemented")
}

func RegisterServiceMeshMetricServiceServer(s *grpc.Server, srv ServiceMeshMetricServiceServer) {
	s.RegisterService(&_ServiceMeshMetricService_serviceDesc, srv)
}

func _ServiceMeshMetricService_Collect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceMeshMetricServiceServer).Collect(&serviceMeshMetricServiceCollectServer{stream})
}

type ServiceMeshMetricService_CollectServer interface {
	SendAndClose(*MeshProbeDownstream) error
	Recv() (*ServiceMeshMetric, error)
	grpc.ServerStream
}

type serviceMeshMetricServiceCollectServer struct {
	grpc.ServerStream
}

func (x *serviceMeshMetricServiceCollectServer) SendAndClose(m *MeshProbeDownstream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceMeshMetricServiceCollectServer) Recv() (*ServiceMeshMetric, error) {
	m := new(ServiceMeshMetric)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ServiceMeshMetricService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ServiceMeshMetricService",
	HandlerType: (*ServiceMeshMetricServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "collect",
			Handler:       _ServiceMeshMetricService_Collect_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service-mesh-probe/service-mesh.proto",
}
