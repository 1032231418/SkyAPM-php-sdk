// Code generated by protoc-gen-go. DO NOT EDIT.
// source: TraceSegmentService.proto

package pb5

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RefType int32

const (
	RefType_CrossProcess RefType = 0
	RefType_CrossThread  RefType = 1
)

var RefType_name = map[int32]string{
	0: "CrossProcess",
	1: "CrossThread",
}

var RefType_value = map[string]int32{
	"CrossProcess": 0,
	"CrossThread":  1,
}

func (x RefType) String() string {
	return proto.EnumName(RefType_name, int32(x))
}

func (RefType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bc055cab3bd8ed31, []int{0}
}

type SpanLayer int32

const (
	SpanLayer_Unknown      SpanLayer = 0
	SpanLayer_Database     SpanLayer = 1
	SpanLayer_RPCFramework SpanLayer = 2
	SpanLayer_Http         SpanLayer = 3
	SpanLayer_MQ           SpanLayer = 4
	SpanLayer_Cache        SpanLayer = 5
)

var SpanLayer_name = map[int32]string{
	0: "Unknown",
	1: "Database",
	2: "RPCFramework",
	3: "Http",
	4: "MQ",
	5: "Cache",
}

var SpanLayer_value = map[string]int32{
	"Unknown":      0,
	"Database":     1,
	"RPCFramework": 2,
	"Http":         3,
	"MQ":           4,
	"Cache":        5,
}

func (x SpanLayer) String() string {
	return proto.EnumName(SpanLayer_name, int32(x))
}

func (SpanLayer) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bc055cab3bd8ed31, []int{1}
}

type UpstreamSegment struct {
	GlobalTraceIds       []*UniqueId `protobuf:"bytes,1,rep,name=globalTraceIds,proto3" json:"globalTraceIds,omitempty"`
	Segment              []byte      `protobuf:"bytes,2,opt,name=segment,proto3" json:"segment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UpstreamSegment) Reset()         { *m = UpstreamSegment{} }
func (m *UpstreamSegment) String() string { return proto.CompactTextString(m) }
func (*UpstreamSegment) ProtoMessage()    {}
func (*UpstreamSegment) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc055cab3bd8ed31, []int{0}
}

func (m *UpstreamSegment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpstreamSegment.Unmarshal(m, b)
}
func (m *UpstreamSegment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpstreamSegment.Marshal(b, m, deterministic)
}
func (m *UpstreamSegment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamSegment.Merge(m, src)
}
func (m *UpstreamSegment) XXX_Size() int {
	return xxx_messageInfo_UpstreamSegment.Size(m)
}
func (m *UpstreamSegment) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamSegment.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamSegment proto.InternalMessageInfo

func (m *UpstreamSegment) GetGlobalTraceIds() []*UniqueId {
	if m != nil {
		return m.GlobalTraceIds
	}
	return nil
}

func (m *UpstreamSegment) GetSegment() []byte {
	if m != nil {
		return m.Segment
	}
	return nil
}

type UniqueId struct {
	IdParts              []int64  `protobuf:"varint,1,rep,packed,name=idParts,proto3" json:"idParts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UniqueId) Reset()         { *m = UniqueId{} }
func (m *UniqueId) String() string { return proto.CompactTextString(m) }
func (*UniqueId) ProtoMessage()    {}
func (*UniqueId) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc055cab3bd8ed31, []int{1}
}

func (m *UniqueId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UniqueId.Unmarshal(m, b)
}
func (m *UniqueId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UniqueId.Marshal(b, m, deterministic)
}
func (m *UniqueId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniqueId.Merge(m, src)
}
func (m *UniqueId) XXX_Size() int {
	return xxx_messageInfo_UniqueId.Size(m)
}
func (m *UniqueId) XXX_DiscardUnknown() {
	xxx_messageInfo_UniqueId.DiscardUnknown(m)
}

var xxx_messageInfo_UniqueId proto.InternalMessageInfo

func (m *UniqueId) GetIdParts() []int64 {
	if m != nil {
		return m.IdParts
	}
	return nil
}

type TraceSegmentObject struct {
	TraceSegmentId        *UniqueId     `protobuf:"bytes,1,opt,name=traceSegmentId,proto3" json:"traceSegmentId,omitempty"`
	Spans                 []*SpanObject `protobuf:"bytes,2,rep,name=spans,proto3" json:"spans,omitempty"`
	ApplicationId         int32         `protobuf:"varint,3,opt,name=applicationId,proto3" json:"applicationId,omitempty"`
	ApplicationInstanceId int32         `protobuf:"varint,4,opt,name=applicationInstanceId,proto3" json:"applicationInstanceId,omitempty"`
	IsSizeLimited         bool          `protobuf:"varint,5,opt,name=isSizeLimited,proto3" json:"isSizeLimited,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}      `json:"-"`
	XXX_unrecognized      []byte        `json:"-"`
	XXX_sizecache         int32         `json:"-"`
}

func (m *TraceSegmentObject) Reset()         { *m = TraceSegmentObject{} }
func (m *TraceSegmentObject) String() string { return proto.CompactTextString(m) }
func (*TraceSegmentObject) ProtoMessage()    {}
func (*TraceSegmentObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc055cab3bd8ed31, []int{2}
}

func (m *TraceSegmentObject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TraceSegmentObject.Unmarshal(m, b)
}
func (m *TraceSegmentObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TraceSegmentObject.Marshal(b, m, deterministic)
}
func (m *TraceSegmentObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraceSegmentObject.Merge(m, src)
}
func (m *TraceSegmentObject) XXX_Size() int {
	return xxx_messageInfo_TraceSegmentObject.Size(m)
}
func (m *TraceSegmentObject) XXX_DiscardUnknown() {
	xxx_messageInfo_TraceSegmentObject.DiscardUnknown(m)
}

var xxx_messageInfo_TraceSegmentObject proto.InternalMessageInfo

func (m *TraceSegmentObject) GetTraceSegmentId() *UniqueId {
	if m != nil {
		return m.TraceSegmentId
	}
	return nil
}

func (m *TraceSegmentObject) GetSpans() []*SpanObject {
	if m != nil {
		return m.Spans
	}
	return nil
}

func (m *TraceSegmentObject) GetApplicationId() int32 {
	if m != nil {
		return m.ApplicationId
	}
	return 0
}

func (m *TraceSegmentObject) GetApplicationInstanceId() int32 {
	if m != nil {
		return m.ApplicationInstanceId
	}
	return 0
}

func (m *TraceSegmentObject) GetIsSizeLimited() bool {
	if m != nil {
		return m.IsSizeLimited
	}
	return false
}

type TraceSegmentReference struct {
	RefType                     RefType   `protobuf:"varint,1,opt,name=refType,proto3,enum=RefType" json:"refType,omitempty"`
	ParentTraceSegmentId        *UniqueId `protobuf:"bytes,2,opt,name=parentTraceSegmentId,proto3" json:"parentTraceSegmentId,omitempty"`
	ParentSpanId                int32     `protobuf:"varint,3,opt,name=parentSpanId,proto3" json:"parentSpanId,omitempty"`
	ParentApplicationInstanceId int32     `protobuf:"varint,4,opt,name=parentApplicationInstanceId,proto3" json:"parentApplicationInstanceId,omitempty"`
	NetworkAddress              string    `protobuf:"bytes,5,opt,name=networkAddress,proto3" json:"networkAddress,omitempty"`
	NetworkAddressId            int32     `protobuf:"varint,6,opt,name=networkAddressId,proto3" json:"networkAddressId,omitempty"`
	EntryApplicationInstanceId  int32     `protobuf:"varint,7,opt,name=entryApplicationInstanceId,proto3" json:"entryApplicationInstanceId,omitempty"`
	EntryServiceName            string    `protobuf:"bytes,8,opt,name=entryServiceName,proto3" json:"entryServiceName,omitempty"`
	EntryServiceId              int32     `protobuf:"varint,9,opt,name=entryServiceId,proto3" json:"entryServiceId,omitempty"`
	ParentServiceName           string    `protobuf:"bytes,10,opt,name=parentServiceName,proto3" json:"parentServiceName,omitempty"`
	ParentServiceId             int32     `protobuf:"varint,11,opt,name=parentServiceId,proto3" json:"parentServiceId,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}  `json:"-"`
	XXX_unrecognized            []byte    `json:"-"`
	XXX_sizecache               int32     `json:"-"`
}

func (m *TraceSegmentReference) Reset()         { *m = TraceSegmentReference{} }
func (m *TraceSegmentReference) String() string { return proto.CompactTextString(m) }
func (*TraceSegmentReference) ProtoMessage()    {}
func (*TraceSegmentReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc055cab3bd8ed31, []int{3}
}

func (m *TraceSegmentReference) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TraceSegmentReference.Unmarshal(m, b)
}
func (m *TraceSegmentReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TraceSegmentReference.Marshal(b, m, deterministic)
}
func (m *TraceSegmentReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraceSegmentReference.Merge(m, src)
}
func (m *TraceSegmentReference) XXX_Size() int {
	return xxx_messageInfo_TraceSegmentReference.Size(m)
}
func (m *TraceSegmentReference) XXX_DiscardUnknown() {
	xxx_messageInfo_TraceSegmentReference.DiscardUnknown(m)
}

var xxx_messageInfo_TraceSegmentReference proto.InternalMessageInfo

func (m *TraceSegmentReference) GetRefType() RefType {
	if m != nil {
		return m.RefType
	}
	return RefType_CrossProcess
}

func (m *TraceSegmentReference) GetParentTraceSegmentId() *UniqueId {
	if m != nil {
		return m.ParentTraceSegmentId
	}
	return nil
}

func (m *TraceSegmentReference) GetParentSpanId() int32 {
	if m != nil {
		return m.ParentSpanId
	}
	return 0
}

func (m *TraceSegmentReference) GetParentApplicationInstanceId() int32 {
	if m != nil {
		return m.ParentApplicationInstanceId
	}
	return 0
}

func (m *TraceSegmentReference) GetNetworkAddress() string {
	if m != nil {
		return m.NetworkAddress
	}
	return ""
}

func (m *TraceSegmentReference) GetNetworkAddressId() int32 {
	if m != nil {
		return m.NetworkAddressId
	}
	return 0
}

func (m *TraceSegmentReference) GetEntryApplicationInstanceId() int32 {
	if m != nil {
		return m.EntryApplicationInstanceId
	}
	return 0
}

func (m *TraceSegmentReference) GetEntryServiceName() string {
	if m != nil {
		return m.EntryServiceName
	}
	return ""
}

func (m *TraceSegmentReference) GetEntryServiceId() int32 {
	if m != nil {
		return m.EntryServiceId
	}
	return 0
}

func (m *TraceSegmentReference) GetParentServiceName() string {
	if m != nil {
		return m.ParentServiceName
	}
	return ""
}

func (m *TraceSegmentReference) GetParentServiceId() int32 {
	if m != nil {
		return m.ParentServiceId
	}
	return 0
}

type SpanObject struct {
	SpanId               int32                    `protobuf:"varint,1,opt,name=spanId,proto3" json:"spanId,omitempty"`
	ParentSpanId         int32                    `protobuf:"varint,2,opt,name=parentSpanId,proto3" json:"parentSpanId,omitempty"`
	StartTime            int64                    `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime              int64                    `protobuf:"varint,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Refs                 []*TraceSegmentReference `protobuf:"bytes,5,rep,name=refs,proto3" json:"refs,omitempty"`
	OperationNameId      int32                    `protobuf:"varint,6,opt,name=operationNameId,proto3" json:"operationNameId,omitempty"`
	OperationName        string                   `protobuf:"bytes,7,opt,name=operationName,proto3" json:"operationName,omitempty"`
	PeerId               int32                    `protobuf:"varint,8,opt,name=peerId,proto3" json:"peerId,omitempty"`
	Peer                 string                   `protobuf:"bytes,9,opt,name=peer,proto3" json:"peer,omitempty"`
	SpanType             SpanType                 `protobuf:"varint,10,opt,name=spanType,proto3,enum=SpanType" json:"spanType,omitempty"`
	SpanLayer            SpanLayer                `protobuf:"varint,11,opt,name=spanLayer,proto3,enum=SpanLayer" json:"spanLayer,omitempty"`
	ComponentId          int32                    `protobuf:"varint,12,opt,name=componentId,proto3" json:"componentId,omitempty"`
	Component            string                   `protobuf:"bytes,13,opt,name=component,proto3" json:"component,omitempty"`
	IsError              bool                     `protobuf:"varint,14,opt,name=isError,proto3" json:"isError,omitempty"`
	Tags                 []*KeyWithStringValue    `protobuf:"bytes,15,rep,name=tags,proto3" json:"tags,omitempty"`
	Logs                 []*LogMessage            `protobuf:"bytes,16,rep,name=logs,proto3" json:"logs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *SpanObject) Reset()         { *m = SpanObject{} }
func (m *SpanObject) String() string { return proto.CompactTextString(m) }
func (*SpanObject) ProtoMessage()    {}
func (*SpanObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc055cab3bd8ed31, []int{4}
}

func (m *SpanObject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpanObject.Unmarshal(m, b)
}
func (m *SpanObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpanObject.Marshal(b, m, deterministic)
}
func (m *SpanObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpanObject.Merge(m, src)
}
func (m *SpanObject) XXX_Size() int {
	return xxx_messageInfo_SpanObject.Size(m)
}
func (m *SpanObject) XXX_DiscardUnknown() {
	xxx_messageInfo_SpanObject.DiscardUnknown(m)
}

var xxx_messageInfo_SpanObject proto.InternalMessageInfo

func (m *SpanObject) GetSpanId() int32 {
	if m != nil {
		return m.SpanId
	}
	return 0
}

func (m *SpanObject) GetParentSpanId() int32 {
	if m != nil {
		return m.ParentSpanId
	}
	return 0
}

func (m *SpanObject) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *SpanObject) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *SpanObject) GetRefs() []*TraceSegmentReference {
	if m != nil {
		return m.Refs
	}
	return nil
}

func (m *SpanObject) GetOperationNameId() int32 {
	if m != nil {
		return m.OperationNameId
	}
	return 0
}

func (m *SpanObject) GetOperationName() string {
	if m != nil {
		return m.OperationName
	}
	return ""
}

func (m *SpanObject) GetPeerId() int32 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func (m *SpanObject) GetPeer() string {
	if m != nil {
		return m.Peer
	}
	return ""
}

func (m *SpanObject) GetSpanType() SpanType {
	if m != nil {
		return m.SpanType
	}
	return SpanType_Entry
}

func (m *SpanObject) GetSpanLayer() SpanLayer {
	if m != nil {
		return m.SpanLayer
	}
	return SpanLayer_Unknown
}

func (m *SpanObject) GetComponentId() int32 {
	if m != nil {
		return m.ComponentId
	}
	return 0
}

func (m *SpanObject) GetComponent() string {
	if m != nil {
		return m.Component
	}
	return ""
}

func (m *SpanObject) GetIsError() bool {
	if m != nil {
		return m.IsError
	}
	return false
}

func (m *SpanObject) GetTags() []*KeyWithStringValue {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *SpanObject) GetLogs() []*LogMessage {
	if m != nil {
		return m.Logs
	}
	return nil
}

type LogMessage struct {
	Time                 int64                 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Data                 []*KeyWithStringValue `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *LogMessage) Reset()         { *m = LogMessage{} }
func (m *LogMessage) String() string { return proto.CompactTextString(m) }
func (*LogMessage) ProtoMessage()    {}
func (*LogMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc055cab3bd8ed31, []int{5}
}

func (m *LogMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogMessage.Unmarshal(m, b)
}
func (m *LogMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogMessage.Marshal(b, m, deterministic)
}
func (m *LogMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogMessage.Merge(m, src)
}
func (m *LogMessage) XXX_Size() int {
	return xxx_messageInfo_LogMessage.Size(m)
}
func (m *LogMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_LogMessage.DiscardUnknown(m)
}

var xxx_messageInfo_LogMessage proto.InternalMessageInfo

func (m *LogMessage) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *LogMessage) GetData() []*KeyWithStringValue {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("RefType", RefType_name, RefType_value)
	proto.RegisterEnum("SpanLayer", SpanLayer_name, SpanLayer_value)
	proto.RegisterType((*UpstreamSegment)(nil), "UpstreamSegment")
	proto.RegisterType((*UniqueId)(nil), "UniqueId")
	proto.RegisterType((*TraceSegmentObject)(nil), "TraceSegmentObject")
	proto.RegisterType((*TraceSegmentReference)(nil), "TraceSegmentReference")
	proto.RegisterType((*SpanObject)(nil), "SpanObject")
	proto.RegisterType((*LogMessage)(nil), "LogMessage")
}

func init() { proto.RegisterFile("TraceSegmentService.proto", fileDescriptor_bc055cab3bd8ed31) }

var fileDescriptor_bc055cab3bd8ed31 = []byte{
	// 869 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x55, 0x6f, 0x6f, 0xe3, 0xc4,
	0x13, 0xae, 0x13, 0xa7, 0x89, 0x27, 0xb9, 0xd4, 0xbf, 0xbd, 0xdf, 0x9d, 0x4c, 0x41, 0x22, 0x44,
	0x07, 0x17, 0x55, 0x95, 0x25, 0x0a, 0xbc, 0x04, 0x71, 0xe4, 0x40, 0x58, 0xb4, 0x47, 0xd8, 0xa4,
	0x9c, 0xc4, 0x0b, 0xa4, 0x8d, 0xbd, 0x4d, 0x4d, 0xec, 0x5d, 0xb3, 0xbb, 0x47, 0x15, 0xbe, 0x0b,
	0x12, 0xaf, 0xf9, 0x6c, 0x7c, 0x08, 0xb4, 0x63, 0xe7, 0x8f, 0x93, 0xa8, 0xef, 0x3c, 0xcf, 0x3c,
	0x3b, 0x3b, 0xf3, 0x8c, 0x67, 0x16, 0xde, 0x9b, 0x29, 0x16, 0xf3, 0x29, 0x5f, 0xe4, 0x5c, 0x98,
	0x29, 0x57, 0x7f, 0xa4, 0x31, 0x0f, 0x0b, 0x25, 0x8d, 0x3c, 0xef, 0x8d, 0x65, 0x9e, 0x4b, 0x51,
	0x59, 0xfe, 0x6b, 0xf9, 0x20, 0xb4, 0x51, 0x9c, 0xe5, 0x15, 0x12, 0xfc, 0xc0, 0x57, 0x6f, 0x53,
	0x73, 0x3f, 0x35, 0x2a, 0x15, 0x8b, 0x9f, 0x59, 0xf6, 0xae, 0x3a, 0x39, 0xfc, 0x15, 0xce, 0x6e,
	0x8b, 0x92, 0x5b, 0x45, 0x26, 0x9f, 0x42, 0x7f, 0x91, 0xc9, 0x39, 0xcb, 0xf0, 0xbe, 0x28, 0xd1,
	0x81, 0x33, 0x68, 0x8e, 0xba, 0x57, 0x5e, 0x78, 0x2b, 0xd2, 0xdf, 0xdf, 0xf1, 0x28, 0xa1, 0x7b,
	0x04, 0x12, 0x40, 0x5b, 0x97, 0xa7, 0x83, 0xc6, 0xc0, 0x19, 0xf5, 0xe8, 0xda, 0x1c, 0xbe, 0x80,
	0xce, 0xfa, 0x94, 0x65, 0xa5, 0xc9, 0x84, 0x29, 0x53, 0x46, 0x6c, 0xd2, 0xb5, 0x39, 0xfc, 0xd7,
	0x01, 0xb2, 0x5b, 0xdd, 0x8f, 0xf3, 0xdf, 0x78, 0x8c, 0x99, 0x98, 0x1d, 0x34, 0x4a, 0x02, 0x67,
	0xe0, 0xec, 0x65, 0x52, 0x27, 0x90, 0x8f, 0xa0, 0xa5, 0x0b, 0x26, 0x74, 0xd0, 0xc0, 0x9c, 0xbb,
	0xe1, 0xb4, 0x60, 0xa2, 0x0c, 0x47, 0x4b, 0x0f, 0x79, 0x01, 0x4f, 0x58, 0x51, 0x64, 0x69, 0xcc,
	0x4c, 0x2a, 0x45, 0x94, 0x04, 0xcd, 0x81, 0x33, 0x6a, 0xd1, 0x3a, 0x48, 0x3e, 0x87, 0x67, 0xbb,
	0x80, 0xd0, 0x86, 0x09, 0x5b, 0x6c, 0xe0, 0x22, 0xfb, 0xb8, 0xd3, 0xc6, 0x4e, 0xf5, 0x34, 0xfd,
	0x93, 0x5f, 0xa7, 0x79, 0x6a, 0x78, 0x12, 0xb4, 0x06, 0xce, 0xa8, 0x43, 0xeb, 0xe0, 0xf0, 0x6f,
	0x17, 0x9e, 0xed, 0x96, 0x4b, 0xf9, 0x1d, 0x57, 0x5c, 0xc4, 0x9c, 0x0c, 0xa1, 0xad, 0xf8, 0xdd,
	0x6c, 0x55, 0x70, 0x2c, 0xb5, 0x7f, 0xd5, 0x09, 0x69, 0x69, 0xd3, 0xb5, 0x83, 0x7c, 0x09, 0xff,
	0x2f, 0x98, 0xe2, 0xc2, 0xcc, 0xea, 0xda, 0x34, 0xf6, 0xb5, 0x39, 0x4a, 0x23, 0x43, 0xe8, 0x95,
	0xb8, 0x55, 0x66, 0x53, 0x7d, 0x0d, 0x23, 0x5f, 0xc3, 0xfb, 0xa5, 0xfd, 0xea, 0x11, 0x09, 0x1e,
	0xa3, 0x90, 0x4f, 0xa0, 0x2f, 0xb8, 0x79, 0x90, 0x6a, 0xf9, 0x2a, 0x49, 0x14, 0xd7, 0x1a, 0x95,
	0xf0, 0xe8, 0x1e, 0x4a, 0x2e, 0xc0, 0xaf, 0x23, 0x51, 0x12, 0x9c, 0x62, 0xf8, 0x03, 0x9c, 0x7c,
	0x05, 0xe7, 0x5c, 0x18, 0xb5, 0x3a, 0x9e, 0x54, 0x1b, 0x4f, 0x3d, 0xc2, 0xb0, 0x77, 0xa1, 0xb7,
	0x9a, 0x9d, 0x37, 0x2c, 0xe7, 0x41, 0x07, 0xb3, 0x3a, 0xc0, 0x6d, 0xfe, 0xbb, 0x58, 0x94, 0x04,
	0x1e, 0xc6, 0xdf, 0x43, 0xc9, 0x25, 0xfc, 0xaf, 0x52, 0x6e, 0x27, 0x28, 0x60, 0xd0, 0x43, 0x07,
	0x19, 0xc1, 0x59, 0x0d, 0x8c, 0x92, 0xa0, 0x8b, 0x61, 0xf7, 0xe1, 0xe1, 0x5f, 0x2e, 0xc0, 0xf6,
	0xd7, 0x25, 0xcf, 0xe1, 0x54, 0x97, 0xed, 0x72, 0x90, 0x5f, 0x59, 0x07, 0xcd, 0x6c, 0x1c, 0x69,
	0xe6, 0x07, 0xe0, 0x69, 0xc3, 0x94, 0x99, 0xa5, 0x39, 0xc7, 0x6e, 0x37, 0xe9, 0x16, 0xb0, 0x43,
	0xc9, 0x45, 0x82, 0x3e, 0x17, 0x7d, 0x6b, 0x93, 0x5c, 0x80, 0xab, 0xf8, 0x9d, 0x6d, 0x9c, 0x9d,
	0xa4, 0xe7, 0xe1, 0xd1, 0x3f, 0x96, 0x22, 0xc7, 0x16, 0x26, 0x0b, 0xae, 0x50, 0x71, 0x5b, 0xe9,
	0xa6, 0x8b, 0xfb, 0xb0, 0x9d, 0x90, 0x1a, 0x84, 0x7d, 0xf3, 0x68, 0x1d, 0xb4, 0xf5, 0x16, 0x9c,
	0xab, 0x28, 0xc1, 0x06, 0xb5, 0x68, 0x65, 0x11, 0x02, 0xae, 0xfd, 0xc2, 0x66, 0x78, 0x14, 0xbf,
	0xc9, 0xc7, 0xd0, 0xb1, 0x6a, 0xe0, 0xd0, 0x00, 0x0e, 0x8d, 0x87, 0x53, 0x8f, 0x53, 0xb3, 0x71,
	0x91, 0x11, 0x78, 0xf6, 0xfb, 0x9a, 0xad, 0xb8, 0x42, 0xd5, 0xfb, 0x57, 0x80, 0x3c, 0x44, 0xe8,
	0xd6, 0x49, 0x06, 0xd0, 0x8d, 0x65, 0x5e, 0x48, 0x51, 0xce, 0x55, 0x0f, 0x33, 0xd8, 0x85, 0xac,
	0xa4, 0x1b, 0x33, 0x78, 0x82, 0xb9, 0x6c, 0x01, 0xdc, 0x73, 0xfa, 0x5b, 0xa5, 0xa4, 0x0a, 0xfa,
	0x38, 0xfe, 0x6b, 0x93, 0xbc, 0x04, 0xd7, 0xb0, 0x85, 0x0e, 0xce, 0x50, 0xd2, 0xa7, 0xe1, 0xe1,
	0x5a, 0xa6, 0x48, 0x20, 0x1f, 0x82, 0x9b, 0xc9, 0x85, 0x0e, 0xfc, 0x6a, 0x8b, 0x5d, 0xcb, 0xc5,
	0x0d, 0xd7, 0x9a, 0x2d, 0x38, 0x45, 0xc7, 0x30, 0x02, 0xd8, 0x62, 0x56, 0x16, 0x63, 0x3b, 0xe8,
	0x60, 0x07, 0xf1, 0xdb, 0xde, 0x95, 0x30, 0xc3, 0xaa, 0x45, 0x78, 0xfc, 0x2e, 0x4b, 0xb8, 0xb8,
	0x84, 0x76, 0xb5, 0x63, 0x88, 0x0f, 0xbd, 0xb1, 0x92, 0x5a, 0x4f, 0x94, 0x8c, 0xb9, 0xd6, 0xfe,
	0x09, 0x39, 0x83, 0x2e, 0x22, 0xb3, 0x7b, 0xc5, 0x59, 0xe2, 0x3b, 0x17, 0xb7, 0xe0, 0x6d, 0x44,
	0x23, 0x5d, 0x68, 0xdf, 0x8a, 0xa5, 0x90, 0x0f, 0xc2, 0x3f, 0x21, 0x3d, 0xe8, 0xbc, 0x66, 0x86,
	0xcd, 0x99, 0xe6, 0xbe, 0x63, 0x43, 0xd1, 0xc9, 0xf8, 0x3b, 0xc5, 0x72, 0x6e, 0xa7, 0xd8, 0x6f,
	0x90, 0x0e, 0xb8, 0xdf, 0x1b, 0x53, 0xf8, 0x4d, 0x72, 0x0a, 0x8d, 0x9b, 0x9f, 0x7c, 0x97, 0x78,
	0xd0, 0x1a, 0xb3, 0xf8, 0x9e, 0xfb, 0xad, 0xab, 0x31, 0x3c, 0x3d, 0xf2, 0xbc, 0x91, 0x4b, 0x68,
	0xc7, 0x32, 0xcb, 0xec, 0x08, 0xf8, 0xe1, 0xde, 0x43, 0x75, 0xde, 0x0d, 0xb7, 0x0f, 0xdd, 0xf0,
	0x64, 0xe4, 0x7c, 0x73, 0x03, 0x2f, 0xa5, 0x5a, 0x84, 0xac, 0xb0, 0x41, 0x43, 0xbd, 0x5c, 0x3d,
	0xb0, 0x6c, 0x99, 0x0a, 0x8b, 0xe4, 0x61, 0xb5, 0x4e, 0xca, 0x77, 0x6f, 0xe2, 0xfc, 0xd2, 0x2c,
	0xe6, 0x5f, 0xfc, 0xd3, 0x38, 0x9f, 0x2e, 0x57, 0x6f, 0x2b, 0xd6, 0x9b, 0x92, 0x31, 0xb1, 0x84,
	0x58, 0x66, 0xf3, 0x53, 0xa4, 0x7e, 0xf6, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x63, 0x28, 0x7b,
	0x80, 0x79, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TraceSegmentServiceClient is the client API for TraceSegmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TraceSegmentServiceClient interface {
	Collect(ctx context.Context, opts ...grpc.CallOption) (TraceSegmentService_CollectClient, error)
}

type traceSegmentServiceClient struct {
	cc *grpc.ClientConn
}

func NewTraceSegmentServiceClient(cc *grpc.ClientConn) TraceSegmentServiceClient {
	return &traceSegmentServiceClient{cc}
}

func (c *traceSegmentServiceClient) Collect(ctx context.Context, opts ...grpc.CallOption) (TraceSegmentService_CollectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TraceSegmentService_serviceDesc.Streams[0], "/TraceSegmentService/collect", opts...)
	if err != nil {
		return nil, err
	}
	x := &traceSegmentServiceCollectClient{stream}
	return x, nil
}

type TraceSegmentService_CollectClient interface {
	Send(*UpstreamSegment) error
	CloseAndRecv() (*Downstream, error)
	grpc.ClientStream
}

type traceSegmentServiceCollectClient struct {
	grpc.ClientStream
}

func (x *traceSegmentServiceCollectClient) Send(m *UpstreamSegment) error {
	return x.ClientStream.SendMsg(m)
}

func (x *traceSegmentServiceCollectClient) CloseAndRecv() (*Downstream, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Downstream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TraceSegmentServiceServer is the server API for TraceSegmentService service.
type TraceSegmentServiceServer interface {
	Collect(TraceSegmentService_CollectServer) error
}

// UnimplementedTraceSegmentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTraceSegmentServiceServer struct {
}

func (*UnimplementedTraceSegmentServiceServer) Collect(srv TraceSegmentService_CollectServer) error {
	return status.Errorf(codes.Unimplemented, "method Collect not implemented")
}

func RegisterTraceSegmentServiceServer(s *grpc.Server, srv TraceSegmentServiceServer) {
	s.RegisterService(&_TraceSegmentService_serviceDesc, srv)
}

func _TraceSegmentService_Collect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TraceSegmentServiceServer).Collect(&traceSegmentServiceCollectServer{stream})
}

type TraceSegmentService_CollectServer interface {
	SendAndClose(*Downstream) error
	Recv() (*UpstreamSegment, error)
	grpc.ServerStream
}

type traceSegmentServiceCollectServer struct {
	grpc.ServerStream
}

func (x *traceSegmentServiceCollectServer) SendAndClose(m *Downstream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *traceSegmentServiceCollectServer) Recv() (*UpstreamSegment, error) {
	m := new(UpstreamSegment)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TraceSegmentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TraceSegmentService",
	HandlerType: (*TraceSegmentServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "collect",
			Handler:       _TraceSegmentService_Collect_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "TraceSegmentService.proto",
}
